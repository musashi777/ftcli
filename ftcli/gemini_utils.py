import os
import requests
import time
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")

# Utilisation d'un mod√®le plus r√©cent et performant
GEMINI_MODEL = "gemini-1.5-flash"

def _call_gemini_api(prompt: str) -> str:
    """Fonction helper pour appeler l'API Gemini avec gestion d'erreurs et logique de retry."""
    if not API_KEY:
        return "[ERREUR] La cl√© API Gemini (GEMINI_API_KEY) n'est pas configur√©e."

    url = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {"contents": [{"parts": [{"text": prompt}]}]}

    max_retries = 3
    delay = 5 # secondes

    for attempt in range(max_retries):
        try:
            resp = requests.post(url, headers=headers, json=data, timeout=90)
            resp.raise_for_status()

            candidates = resp.json().get("candidates", [])
            if not candidates:
                return "[ERREUR Gemini] R√©ponse vide ou malform√©e de l'API."
            return candidates[0]["content"]["parts"][0]["text"]

        except requests.exceptions.HTTPError as e:
            if e.response.status_code >= 500 and attempt < max_retries - 1:
                print(f"[AVERTISSEMENT] Erreur serveur Gemini ({e.response.status_code}). Nouvel essai dans {delay} secondes...")
                time.sleep(delay)
                continue
            else:
                return f"[ERREUR Gemini] Probl√®me de connexion : {e}\n{getattr(e.response, 'text', '')}"
        except Exception as e:
            error_details = getattr(resp, "text", "Aucun d√©tail de r√©ponse disponible.")
            return f"[ERREUR Gemini] Erreur inattendue : {e}\n{error_details}"

    return "[ERREUR Gemini] √âchec de l'appel API apr√®s plusieurs tentatives."

def extraire_sections_cv_ia(texte_cv: str) -> str:
    """Envoie le texte d'un CV √† Gemini pour extraire les sections cl√©s."""
    prompt = (
        "Lis attentivement ce texte de CV et extrais de fa√ßon structur√©e les sections suivantes au format Markdown :\n"
        "1. **Comp√©tences** : Liste des comp√©tences techniques et comportementales.\n"
        "2. **Exp√©riences professionnelles** : Pour chaque poste, inclure l'entreprise, la fonction, les dates et les missions principales.\n"
        "3. **Formations** : Liste des dipl√¥mes, √©coles et dates.\n"
        "Ne g√©n√®re rien d‚Äôautre que ce plan. Sois exhaustif. Voici le texte √† analyser :\n\n" + texte_cv
    )
    return _call_gemini_api(prompt)

def adapter_cv_ia(texte_cv_analyse: str, description_offre: str) -> str:
    """Adapte un CV (analyse structur√©e) en fonction d'une offre d'emploi."""
    prompt = f"""
Voici une analyse structur√©e d'un CV :
--- CV ANALYS√â ---
{texte_cv_analyse}
--- FIN CV ANALYS√â ---

Voici la description d'une offre d'emploi :
--- OFFRE D'EMPLOI ---
{description_offre}
--- FIN OFFRE D'EMPLOI ---

Ta mission est de g√©n√©rer un nouveau document texte optimis√© pour cette offre. Mets en avant les comp√©tences et exp√©riences du CV qui correspondent le mieux aux exigences de l'offre.
Organise le r√©sultat comme un CV classique (r√©sum√©, comp√©tences, exp√©riences, formation). Le ton doit √™tre professionnel et percutant.
"""
    return _call_gemini_api(prompt)

def generer_rapport_matching_ia(analyse_cv: str, description_offre: str) -> str:
    """G√©n√®re un rapport de compatibilit√© entre un CV et une offre d'emploi."""
    prompt = f"""
En tant qu'expert en recrutement, analyse la compatibilit√© entre le profil de CV suivant et la description de l'offre d'emploi.

--- PROFIL DU CANDIDAT (CV) ---
{analyse_cv}
--- FIN PROFIL ---

--- DESCRIPTION DE L'OFFRE D'EMPLOI ---
{description_offre}
--- FIN OFFRE ---

G√©n√®re un rapport de compatibilit√© concis au format Markdown. Le rapport doit inclure IMP√âRATIVEMENT les sections suivantes :
1.  **üìä Score de Compatibilit√©** : Donne un pourcentage estim√© de compatibilit√© et une phrase de r√©sum√©.
2.  **‚úÖ Points Forts** : Liste les 3 √† 5 comp√©tences ou exp√©riences les plus importantes du candidat qui correspondent parfaitement √† l'offre.
3.  **‚ùå Points Faibles** : Liste les 2 ou 3 comp√©tences cl√©s requises par l'offre qui ne semblent pas pr√©sentes dans le CV.
4.  **üîë Mots-cl√©s √† int√©grer** : Sugg√®re une liste de mots-cl√©s de l'offre que le candidat devrait int√©grer dans son CV pour passer les filtres ATS.
5.  **üí¨ Suggestion Strat√©gique** : Une courte phrase donnant un conseil au candidat pour cette postulation sp√©cifique.
"""
    return _call_gemini_api(prompt)

def generer_lettre_motivation_ia(analyse_cv: str, description_offre: str) -> str:
    """G√©n√®re une lettre de motivation personnalis√©e."""
    prompt = f"""
Tu es un expert en recrutement. R√©dige une lettre de motivation percutante et professionnelle en te basant sur les informations suivantes.

CONTEXTE : Le candidat suivant postule √† l'offre d'emploi ci-dessous.

--- PROFIL DU CANDIDAT (CV) ---
{analyse_cv}
--- FIN PROFIL ---

--- DESCRIPTION DE L'OFFRE D'EMPLOI ---
{description_offre}
--- FIN OFFRE ---

INSTRUCTIONS :
1. Adresse la lettre de mani√®re formelle (ex: "Madame, Monsieur,").
2. Structure la lettre en 3-4 paragraphes clairs :
   - Paragraphe 1 : Introduction, mention du poste vis√© et de l'entreprise.
   - Paragraphe 2 : Mettre en avant 2 ou 3 comp√©tences/exp√©riences CL√âS du candidat qui correspondent PARFAITEMENT aux exigences de l'offre. Utilise des exemples concrets du CV.
   - Paragraphe 3 : Montrer l'enthousiasme pour l'entreprise et le poste, et comment le candidat peut apporter de la valeur.
3. Termine par une formule de politesse classique et une proposition de rencontre.
4. Le ton doit √™tre confiant et professionnel. La lettre ne doit PAS √™tre une simple r√©p√©tition du CV.
"""
    return _call_gemini_api(prompt)
